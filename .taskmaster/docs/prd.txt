<context>
# 概述  
本專案為一個多代理協作平台（orchestration-agent），可自動發現、註冊、並協調多個 A2A（Agent-to-Agent）智能代理。其核心目標是根據使用者意圖，將請求自動路由至最合適的子代理，並整合多代理的能力，提升任務處理的彈性與智能化。適用於需要多任務協同、智能分流、或跨領域 AI 能力整合的應用場景。

# 核心功能  
- 代理自動發現與註冊：可從註冊表自動載入所有可用代理，並查詢其能力描述（AgentCard）。
- 任務路由與委派：主 OrchestratorAgent 會根據使用者查詢內容，判斷意圖並將任務委派給最合適的子代理。
- 子代理範例：如 GreetingAgent（根據時間問候）、TellTimeAgent（回報當前時間）、ExcelWhisperAgent（處理 Excel 相關任務）等。
- JSON-RPC 與 HTTP API：所有代理均支援標準 JSON-RPC 通訊協定，便於擴充與整合。
- 內建記憶體與 session 管理：支援 InMemory session/memory/artifact，方便 demo 與測試。

# 使用者體驗  
- 目標用戶角色：AI 工程師、產品開發者、需要多代理協作的應用開發者。
- 主要使用流程：啟動主代理（OrchestratorAgent），自動發現所有子代理，使用者可透過 API 發送任務，由主代理自動分流處理。
- UI/UX 考量：目前以 API/CLI 為主，未提供前端 UI，但架構易於擴充 Web 前端。
</context>
<PRD>
# 技術架構  
- 系統組件：OrchestratorAgent（主控）、多個子代理（如 GreetingAgent）、DiscoveryClient（代理發現）、A2AServer（API 伺服器）、TaskManager（任務管理）。
- 資料模型：AgentCard、Task、Message、Session 等（皆為 Pydantic 定義）。
- API 與整合：所有代理均支援 JSON-RPC over HTTP，並有標準發現端點（/.well-known/agent.json）。
- 基礎設施需求：Python 3.13+，依賴 FastAPI、httpx、pydantic、google-adk、uvicorn 等。
- A2A協議：Agent之間溝通符合Google A2A Protocol

# 開發路線圖  
- MVP（最小可行產品）需求：
  - 支援多代理自動發現與註冊
  - OrchestratorAgent 能根據意圖自動分流任務
  - 子代理能正確回應並處理分配任務
  - 提供基本的 API 測試腳本
- 未來增強功能：
  - 增加更多智能子代理（如資料查詢、文件處理等）
  - 支援分散式部署與動態擴充
  - 提供 Web 前端管理介面
  - 增強安全性與權限控管

# 邏輯依賴鏈
- 需優先建置的基礎功能：DiscoveryClient、A2AServer、AgentCard 資料結構
- 先完成 OrchestratorAgent 與基本子代理（如 GreetingAgent、TellTimeAgent）
- 再擴充更多子代理與進階任務協作邏輯

# 風險與因應措施  
- 技術挑戰：多代理協作的錯誤處理與狀態同步
- MVP 定義與調整：確保最小可行功能可獨立運作
- 資源限制：如需大規模測試，需考慮分散式架構與效能優化

# 附錄  
- 研究發現：參考 Google ADK、Google A2A、OpenAI 多代理協作架構
- 技術規格：詳見 pyproject.toml 依賴與各 agents/server/models/utilities 目錄
</PRD> 